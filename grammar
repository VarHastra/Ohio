program -> stmt* EOF
stmt -> exprStmt, printStmt, printlnStmt, block, ifStmt, whileStmt, repeatStmt
exprStmt -> expr SEMICOLON
printStmt -> PRINT expr SEMICOLON
printlnStmt -> PRINT expr SEMICOLON
block -> LEFT_BRACE stmt RIGHT_BRACE
ifStmt -> IF expr block (ELSE (block | ifStmt))?
whileStmt -> WHILE expr block
repeatStmt -> REPEAT block WHILE expr SEMICOLON
expr -> assignment
assignment -> (IDENTIFIER COLON_EQUAL assignment) | equality
equality -> comparison ((EQUAL_EQUAL, BANG_EQUAL) comparison)*
comparison -> logicalImp ((GREATER, GREATER_EQ, LESS, LESS_EQ) logicalImp)*
logicalImp -> logicalOr (IMP | NIMP) logicalImp
logicalOr -> logicalXor ((OR, NOR) logicalXor)*
logicalXor -> logicalAnd ((XOR, XNOR) logicalAnd)*
logicalAnd -> addition ((AND, NAND) addition)*
addition -> multiplication ((PLUS, MINUS) multiplication)*
multiplication -> unary ((STAR, SLASH, MOD) unary)*
unary -> ((NOT | MINUS) unary) | primary
primary -> TRUE, FALSE, NUMBER, STRING, IDENTIFIER, (LEFT_PAREN expr RIGHT_PAREN)

// Terminals
LEFT_PAREN -> (
RIGHT_PAREN -> )
LEFT_BRACE -> {
RIGHT_BRACE -> }
SEMICOLON -> ;
PLUS -> '+'
MINUS -> -
STAR -> '*'
SLASH -> /
MOD -> %
COLON_EQUAL -> :=
EQUAL_EQUAL -> ==
BANG_EQUAL -> !=
GREATER -> >
GREATER_EQUAL -> >=
LESS -> <
LESS_EQUAL -> <=
TRUE -> true
FALSE -> false
NOT -> not
AND -> and
NAND -> nand
OR -> or
NOR -> nor
IMP -> imp
NIMP -> nimp
XOR -> xor
XNOR -> xnor
PRINT -> print
PRINTLN -> println
IF -> if
ELSE -> else
WHILE -> while
REPEAT -> repeat
NUMBER -> [0-9][_0-9]*
STRING -> "[^\n"]*"
IDENTIFIER -> [_a-zA-Z][_a-zA-Z0-9]*
EOF